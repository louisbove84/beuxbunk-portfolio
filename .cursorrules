# =======================================
# Cursor Rules - Common Best Practices
# =======================================

# ---- Commit Message Guidelines ----
commit_messages:
  - Subject line <= 50 characters, imperative mood (e.g., "Add feature", "Fix bug")
  - No trailing period on subject line
  - Optional body: <= 72 characters per line
  - Only include details in body if context is necessary
  - Avoid generic terms like "update" or "misc changes"

# ---- Code Style Guidelines ----
code_style:
  - Follow language-specific style guides (PEP8 for Python, Airbnb for JS/TS, etc.)
  - Use descriptive variable and function names
  - Avoid deeply nested logic when possible
  - Keep functions small and focused (single responsibility)
  - Ensure code is self-explanatory before relying on comments

# ---- Documentation Practices ----
documentation:
  - Update README.md with setup instructions and usage examples
  - Keep inline comments concise and meaningful
  - For public functions/classes, add docstrings with parameters and return types
  - Document any environment variables in `.env.example`
  - Maintain a clear changelog (`CHANGELOG.md`) for releases

# ---- Security Best Practices ----
security:
  - Never commit secrets or credentials
  - Use `.gitignore` to exclude sensitive files
  - Sanitize all user inputs in web-facing code
  - Avoid using outdated dependencies with known vulnerabilities

# ---- Testing Practices ----
testing:
  - Write unit tests for new features and bug fixes
  - Maintain >= 80% test coverage
  - Use meaningful test names and clear assertions
  - Run all tests before committing
  - build locally prior to asking to push to github

# ---- File & Project Structure ----
project_structure:
  - Organize files logically by feature/module
  - Keep configuration files in a dedicated config/ directory where applicable
  - Store reusable components in a components/ or lib/ folder
  - Use consistent naming conventions for files (kebab-case or snake_case)

# ---- Performance Guidelines ----
performance:
  - Avoid premature optimization, but be aware of bottlenecks
  - Use lazy loading for large assets when possible
  - Optimize database queries and API calls
  - Monitor build sizes for frontend projects

# ---- Collaboration Practices ----
collaboration:
  - Pull latest changes before starting new work
  - Write PR descriptions that explain what and why, not just how
  - Keep branches focused on a single topic or feature
  - Resolve merge conflicts thoughtfully and test after resolution
